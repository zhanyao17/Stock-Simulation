{"message":"unreachable expression","code":{"code":"unreachable_code","explanation":null},"level":"warning","spans":[{"file_name":"src/bin/stock.rs","byte_start":16293,"byte_end":16311,"line_start":373,"line_end":373,"column_start":9,"column_end":27,"is_primary":true,"text":[{"text":"        connection.close() //#TODO: CHECK ON THIS","highlight_start":9,"highlight_end":27}],"label":"unreachable expression","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/stock.rs","byte_start":11128,"byte_end":16284,"line_start":275,"line_end":372,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        loop{","highlight_start":9,"highlight_end":14},{"text":"            // send list for customer","highlight_start":1,"highlight_end":38},{"text":"            println!(\"Exchange: Stock list publishing..\");","highlight_start":1,"highlight_end":59},{"text":"            thread::sleep(Duration::from_secs(3)); // NOTE: try this ","highlight_start":1,"highlight_end":70},{"text":"            sl_tx.send(STOCK_LIST.clone()).unwrap();","highlight_start":1,"highlight_end":53},{"text":"            // send stock list to broker1","highlight_start":1,"highlight_end":42},{"text":"            let clone_stock_arc = Arc::clone(&STOCK_LIST);","highlight_start":1,"highlight_end":59},{"text":"            let vec_stock_list = clone_stock_arc.lock().unwrap().clone();","highlight_start":1,"highlight_end":74},{"text":"            let stock_list_json = serde_json::to_string(&vec_stock_list).expect(\"Failed to serialize\");","highlight_start":1,"highlight_end":104},{"text":"            send_stock_list.publish(Publish::new(stock_list_json.as_bytes(),\"sentStockInfoBrk1\"))?;","highlight_start":1,"highlight_end":100},{"text":"            println!(\"***$$ had send stock list to broker1\");","highlight_start":1,"highlight_end":62},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            // Get purchaase info from broker and update to stock profile","highlight_start":1,"highlight_end":74},{"text":"            let timeout_purchasing_monitor = Duration::from_secs(5); // Adjust as needed","highlight_start":1,"highlight_end":89},{"text":"            loop{","highlight_start":1,"highlight_end":18},{"text":"                match ex_pur_recv.receiver().recv_timeout(timeout_purchasing_monitor) {","highlight_start":1,"highlight_end":88},{"text":"                    Ok (ul)=>{","highlight_start":1,"highlight_end":31},{"text":"                        match ul{","highlight_start":1,"highlight_end":34},{"text":"                            ConsumerMessage::Delivery(delivery)=>{","highlight_start":1,"highlight_end":67},{"text":"                                let body = String::from_utf8_lossy(&delivery.body);","highlight_start":1,"highlight_end":84},{"text":"                                let user_list: User= serde_json::from_str(&body).expect(\"Failed to desialize\");","highlight_start":1,"highlight_end":112},{"text":"                                StockProfile::add_stock_profile(user_list.stock_name, 0,user_list.num_stock);","highlight_start":1,"highlight_end":110},{"text":"                                ex_pur_recv.ack(delivery)?;","highlight_start":1,"highlight_end":60},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            other =>{","highlight_start":1,"highlight_end":38},{"text":"                                println!(\"Exchange ended here{:?}\",other);","highlight_start":1,"highlight_end":75},{"text":"                                break;","highlight_start":1,"highlight_end":39},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Err(_)=>{","highlight_start":1,"highlight_end":30},{"text":"                        println!(\"Exchange - update pur vol: Timeout reached. No message received.\");","highlight_start":1,"highlight_end":102},{"text":"                        break;","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Update sell vol","highlight_start":1,"highlight_end":31},{"text":"            let timeout_selling_monitor = Duration::from_secs(5);","highlight_start":1,"highlight_end":66},{"text":"            loop{","highlight_start":1,"highlight_end":18},{"text":"                match ex_sell_recv.receiver().recv_timeout(timeout_selling_monitor){","highlight_start":1,"highlight_end":85},{"text":"                    Ok(ul)=>{","highlight_start":1,"highlight_end":30},{"text":"                        match ul{","highlight_start":1,"highlight_end":34},{"text":"                            ConsumerMessage::Delivery(delivery)=>{","highlight_start":1,"highlight_end":67},{"text":"                                let body = String::from_utf8_lossy(&delivery.body);","highlight_start":1,"highlight_end":84},{"text":"                                let received_stocks: Vec<(String, i128)> = serde_json::from_str(&body).expect(\"Failed to deserialize\");","highlight_start":1,"highlight_end":136},{"text":"                                StockProfile::update_sell_vol(received_stocks.clone());","highlight_start":1,"highlight_end":88},{"text":"                                ex_sell_recv.ack(delivery)?;","highlight_start":1,"highlight_end":61},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            other =>{","highlight_start":1,"highlight_end":38},{"text":"                                println!(\"Exchange ended here{:?}\",other);","highlight_start":1,"highlight_end":75},{"text":"                                break;","highlight_start":1,"highlight_end":39},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Err(_)=>{","highlight_start":1,"highlight_end":30},{"text":"                        println!(\"Exchange - update sell vol: Timeout reached. No message received.\");","highlight_start":1,"highlight_end":103},{"text":"                        break;","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // check up trends","highlight_start":1,"highlight_end":31},{"text":"            let (up_stock_list, uptrend) = StockProfile::detect_up_trend();","highlight_start":1,"highlight_end":76},{"text":"            println!(\"Exchange: Currently checking on uptrend...\");","highlight_start":1,"highlight_end":68},{"text":"            thread::sleep(Duration::from_millis(200)); // NOTE: try this  ","highlight_start":1,"highlight_end":75},{"text":"            if uptrend{","highlight_start":1,"highlight_end":24},{"text":"                for stock in up_stock_list.iter(){","highlight_start":1,"highlight_end":51},{"text":"                    println!(\"{}Exchange: Stock [{}] was on fire!!{}\",ANSI_BOLD_GREEN,stock.0,ANSI_RESET);","highlight_start":1,"highlight_end":107},{"text":"                    // update STOCK_LIST price","highlight_start":1,"highlight_end":47},{"text":"                    STOCK_LIST::update_stock_price((stock.0).clone(),true);","highlight_start":1,"highlight_end":76},{"text":"                    // send uptrend info for broker 1","highlight_start":1,"highlight_end":54},{"text":"                    let stock_profile_json = serde_json::to_string(&stock).expect(\"Failed to serialize\");","highlight_start":1,"highlight_end":106},{"text":"                    send_stock_list.publish(Publish::new(stock_profile_json.as_bytes(),\"sentStockTrendingBrk1\"))?;","highlight_start":1,"highlight_end":115},{"text":"                    // send uptrend info for broker 2","highlight_start":1,"highlight_end":54},{"text":"                }    ","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Adding external factor to sped up the cut lose action","highlight_start":1,"highlight_end":69},{"text":"            let downtrend_news = StockProfile::external_down_trend();","highlight_start":1,"highlight_end":70},{"text":"            let news = &new_title_list[downtrend_news as usize];","highlight_start":1,"highlight_end":65},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            // check down trend","highlight_start":1,"highlight_end":32},{"text":"            let (down_trend_stock,dwntrend) = StockProfile::detect_down_trend();","highlight_start":1,"highlight_end":81},{"text":"            println!(\"Exchange: Currently checking on downstrend...\");","highlight_start":1,"highlight_end":71},{"text":"            if dwntrend{","highlight_start":1,"highlight_end":25},{"text":"                println!(\"<<< Exchange: Breaking news!! {}>>>>\",news.content);","highlight_start":1,"highlight_end":79},{"text":"                for stock in down_trend_stock.iter(){","highlight_start":1,"highlight_end":54},{"text":"                    println!(\"{}Exchange: Stock [{}] was dropping!!{}\",ANSI_BOLD_RED,stock.0,ANSI_RESET);","highlight_start":1,"highlight_end":106},{"text":"                    // update stock price","highlight_start":1,"highlight_end":42},{"text":"                    STOCK_LIST::update_stock_price((stock.0).clone(),false);","highlight_start":1,"highlight_end":77},{"text":"                    // send to broker 1","highlight_start":1,"highlight_end":40},{"text":"                    let stock_profile_json = serde_json::to_string(&stock).expect(\"Failed to serialize\");","highlight_start":1,"highlight_end":106},{"text":"                    send_stock_list.publish(Publish::new(stock_profile_json.as_bytes(),\"sentStockTrendingBrk1\"))?;","highlight_start":1,"highlight_end":115},{"text":"                    // send to broker 2","highlight_start":1,"highlight_end":40},{"text":"                }     ","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"any code following this expression is unreachable","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unreachable_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/stock.rs:373:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        loop{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m276\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            // send list for customer\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            println!(\"Exchange: Stock list publishing..\");\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            thread::sleep(Duration::from_secs(3)); // NOTE: try this \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m371\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m372\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12many code following this expression is unreachable\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m373\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        connection.close() //#TODO: CHECK ON THIS\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33munreachable expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unreachable_code)]` on by default\u001b[0m\n\n"}
{"message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}
